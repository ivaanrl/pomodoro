{"version":3,"sources":["actions/types.ts","actions/timer.ts","components/Timer/Timer.tsx","actions/index.ts","components/TimerControls/TimerControls.tsx","App.tsx","serviceWorker.ts","reducers/index.ts","reducers/timer.ts","index.tsx"],"names":["ActionTypes","timerInterval","allActions","startTimer","payload","type","pauseTimer","resetTimer","increaseBreakTimer","increaseWorkTimer","decreaseBreakTimer","decreaseWorkTimer","hardResetTimer","TimerControls","dispatch","useDispatch","fixWorkTime","useSelector","state","timer","fixWork","fixBreakTime","fixBreak","className","onClick","Math","floor","Timer","useState","startButtonDisabled","setStartButtonDisabled","audioRef","useRef","workTime","work","breakTime","break","setInterval","reduceTime","a","clearInterval","current","play","formatTime","time","mins","slice","secs","disabled","ref","src","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.39bcc38c.chunk.js","sourcesContent":["export enum ActionTypes {\n  startTimer,\n  pauseTimer,\n  resetTimer,\n  increaseWorkTimer,\n  decreaseWorkTimer,\n  increaseBreakTimer,\n  decreaseBreakTimer,\n  hardResetTimer\n}\n","import { ActionTypes } from './types';\n\nexport const startTimer = (payload: { work: number; break: number }) => {\n  return {\n    type: ActionTypes.startTimer,\n    payload: payload\n  };\n};\n\nexport const pauseTimer = () => {\n  return {\n    type: ActionTypes.pauseTimer\n  };\n};\n\nexport const resetTimer = () => {\n  return {\n    type: ActionTypes.resetTimer\n  };\n};\n\nexport const increaseWorkTimer = () => {\n  return {\n    type: ActionTypes.increaseWorkTimer\n  };\n};\n\nexport const decreaseWorkTimer = () => {\n  return {\n    type: ActionTypes.decreaseWorkTimer\n  };\n};\n\nexport const increaseBreakTimer = () => {\n  return {\n    type: ActionTypes.increaseBreakTimer\n  };\n};\n\nexport const decreaseBreakTimer = () => {\n  return {\n    type: ActionTypes.decreaseBreakTimer\n  };\n};\n\nexport const hardResetTimer = () => {\n  return {\n    type: ActionTypes.hardResetTimer\n  };\n};\n","import React, { useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport allActions from '../../actions';\nimport { StoreState } from '../../reducers';\nimport TimerControls from '../TimerControls/TimerControls';\nimport './Timer.scss';\n\nlet timerInterval: NodeJS.Timeout;\nexport const Timer = () => {\n  const dispatch = useDispatch();\n  const [startButtonDisabled, setStartButtonDisabled] = useState(false);\n\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  let workTime = useSelector((state: StoreState) => state.timer.work);\n  let breakTime = useSelector((state: StoreState) => state.timer.break);\n  let fixWorkTime = useSelector((state: StoreState) => state.timer.fixWork);\n  let fixBreakTime = useSelector((state: StoreState) => state.timer.fixBreak);\n\n  const startTimer = () => {\n    setStartButtonDisabled(true);\n    timerInterval = setInterval(reduceTime, 1000);\n  };\n\n  const reduceTime = async () => {\n    if (workTime > 0) {\n      workTime = workTime - 1;\n      if (workTime === 0) {\n        clearInterval(timerInterval);\n        audioRef.current?.play();\n        audioRef.current?.play();\n        startTimer();\n      }\n    } else {\n      breakTime -= 1;\n    }\n    dispatch(allActions.startTimer({ work: workTime, break: breakTime }));\n\n    if (breakTime === 0) {\n      clearInterval(timerInterval);\n      audioRef.current?.play();\n      audioRef.current?.play();\n      dispatch(allActions.resetTimer());\n\n      workTime = fixWorkTime;\n      breakTime = fixBreakTime;\n      startTimer();\n    }\n  };\n  const resetTimer = () => {\n    clearInterval(timerInterval);\n    dispatch(allActions.hardResetTimer());\n    setStartButtonDisabled(false);\n  };\n\n  const stopTimer = () => {\n    clearInterval(timerInterval);\n    setStartButtonDisabled(false);\n  };\n\n  const formatTime = (time: number) => {\n    let mins = ('0' + Math.floor(time / 60)).slice(-2); //format to two digits.\n    let secs = ('0' + (time % 60)).slice(-2);\n    return `${mins}:${secs}`;\n  };\n\n  let timer = (\n    <div className=\"timer\">\n      <div className=\"work-text\">LET'S GET TO WORK!</div>\n      <div className=\"work-timer\">{formatTime(workTime)}</div>\n    </div>\n  );\n\n  if (workTime === 0) {\n    timer = (\n      <div className=\"timer\">\n        <div className=\"work-text\">TIME TO GET A BREAK</div>\n        <div className=\"work-timer\">{formatTime(breakTime)}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"timer-container\">\n      {timer}\n      <div className=\"button-container\">\n        <button\n          className=\"btn start-timer\"\n          disabled={startButtonDisabled}\n          onClick={() => startTimer()}\n        >\n          START\n        </button>\n        <button className=\"btn\" onClick={stopTimer}>\n          STOP\n        </button>\n        <button className=\"btn res-timer\" onClick={resetTimer}>\n          RESET\n        </button>\n      </div>\n      <TimerControls />\n      <audio ref={audioRef}>\n        <source\n          src=\"https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\"\n          type=\"audio/mpeg\"\n        ></source>\n      </audio>\n    </div>\n  );\n};\n\nexport default Timer;\n","import {\n  startTimer,\n  pauseTimer,\n  resetTimer,\n  increaseBreakTimer,\n  increaseWorkTimer,\n  decreaseBreakTimer,\n  decreaseWorkTimer,\n  hardResetTimer\n} from './timer';\n\nconst allActions = {\n  startTimer,\n  pauseTimer,\n  resetTimer,\n  increaseBreakTimer,\n  increaseWorkTimer,\n  decreaseBreakTimer,\n  decreaseWorkTimer,\n  hardResetTimer\n};\n\nexport default allActions;\n","import React from 'react';\nimport './TimerControls.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport allActions from '../../actions';\nimport { StoreState } from '../../reducers';\n\nconst TimerControls = () => {\n  const dispatch = useDispatch();\n  let fixWorkTime = useSelector((state: StoreState) => state.timer.fixWork);\n  let fixBreakTime = useSelector((state: StoreState) => state.timer.fixBreak);\n\n  return (\n    <div className=\"timer-controls-container\">\n      <div className=\"little-container\">\n        <div className=\"timer-control\">\n          <button\n            className=\"arr-btn increase-work-timer\"\n            onClick={() => dispatch(allActions.increaseWorkTimer())}\n          >\n            +\n          </button>\n          <div className=\"work time-control-text\">\n            {Math.floor(fixWorkTime / 60)}\n          </div>\n          <button\n            className=\"arr-btn decrease-work-timer\"\n            onClick={() => dispatch(allActions.decreaseWorkTimer())}\n          >\n            -\n          </button>\n        </div>\n        <div className=\"description\">SESSION LENGTH</div>\n      </div>\n      <div className=\"little-container\">\n        <div className=\"timer-control\">\n          <button\n            className=\"arr-btn increase-break-timer\"\n            onClick={() => dispatch(allActions.increaseBreakTimer())}\n          >\n            +\n          </button>\n          <div className=\"break time-control-text\">\n            {Math.floor(fixBreakTime / 60)}\n          </div>\n          <button\n            className=\"arr-btn decrease-break-timer\"\n            onClick={() => dispatch(allActions.decreaseBreakTimer())}\n          >\n            -\n          </button>\n        </div>\n        <div className=\"description\">BREAK LENGTH</div>\n      </div>\n    </div>\n  );\n};\n\nexport default TimerControls;\n","import React from 'react';\nimport './App.scss';\nimport Timer from './components/Timer/Timer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { timer } from './timer';\nexport interface StoreState {\n  timer: {\n    work: number;\n    break: number;\n    fixWork: number;\n    fixBreak: number;\n  };\n}\n\nexport const rootReducer = combineReducers<StoreState>({\n  timer: timer\n});\n","/* eslint-disable no-octal */\nimport { ActionTypes } from '../actions/types';\n\nexport const timer = (\n  state: { work: number; break: number; fixWork: number; fixBreak: number } = {\n    work: 1500,\n    break: 300,\n    fixWork: 1500,\n    fixBreak: 300\n  },\n  action: { type: ActionTypes; payload: { work: number; break: number } }\n) => {\n  switch (action.type) {\n    case ActionTypes.startTimer:\n      return { ...state, ...action.payload };\n    case ActionTypes.resetTimer:\n      return { ...state, work: state.fixWork, break: state.fixBreak };\n    case ActionTypes.hardResetTimer:\n      return { work: 1500, break: 300, fixWork: 1500, fixBreak: 300 };\n    case ActionTypes.increaseWorkTimer:\n      if (state.work < 3600) {\n        return { ...state, work: state.work + 60, fixWork: state.fixWork + 60 };\n      } else {\n        return state;\n      }\n    case ActionTypes.decreaseWorkTimer:\n      if (state.work >= 120) {\n        return { ...state, work: state.work - 60, fixWork: state.fixWork - 60 };\n      } else {\n        return state;\n      }\n    case ActionTypes.increaseBreakTimer:\n      if (state.break < 1800) {\n        return {\n          ...state,\n          break: state.break + 60,\n          fixBreak: state.fixBreak + 60\n        };\n      } else {\n        return state;\n      }\n    case ActionTypes.decreaseBreakTimer:\n      if (state.break >= 120) {\n        return {\n          ...state,\n          break: state.break - 60,\n          fixBreak: state.fixBreak - 60\n        };\n      } else {\n        return state;\n      }\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { rootReducer } from './reducers/index';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}